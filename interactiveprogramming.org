#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/2.6.2/
#+REVEAL_THEME: moon
#+OPTIONS: num:nil toc:nil
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+REVEAL_EXTRA_CSS: http://gad.tuppu.net/css/tables.css
#+AUTHOR: Daniel Szmulewicz
#+EMAIL: daniel.szmulewicz@gmail.com
#+TITLE: Interactive programming

* Introduction
** Philosophy
#+BEGIN_QUOTE
“There is no such thing as philosophy-free science; there is only science whose philosophical baggage is taken on board without examination. — Daniel Dennett, Darwin's Dangerous Idea, 1995 
#+END_QUOTE
** A little quiz for starters
Joan is looking at Agnès, and Agnès is looking at Josep. Joan is married, but Josep is not. Is a married person looking at an unmarried person?
#+ATTR_REVEAL: :frag (roll-in)
- A. Yes
- B. No
- C. There is not enough information to derive the correct answer.
** Evolution
The human brain is wired to accept the first seemingly fit answer that comes to mind when considering a problem.
It makes sense from an evolutionary point of view: heuristics speed up the process of finding a solution. Speed is important for survival.
** Reasoning and Logic
#+BEGIN_QUOTE
Psychologists concur with philosophers in the irrelevance of logic to everyday reasoning. Decades of work on Wason’s selection task seem to confirm this. — Pascal Engels
#+END_QUOTE
** Thinking, Fast and Slow
Following Daniel Kahneman’s terminology, the brain works in two modes, system 1 and system 2. System 1 is the thinking that is fast, intuitive, and unaware of its workings. System 2 is the slow thinking able to correct system 1’s mistakes. The problem is that we often fail to recognize when we need to switch gear and slow down. 
** So, programming are we?
Question: When we program, do we use system 1 or system 2?
#+ATTR_REVEAL: :frag (roll-in)
We use both. When we learn or face a difficult part of the program, we use system 2, but most of the time we’ll try to maximize system 1 and proceed fast to use what we’ve learnt, what we already know.
** Epistemological pluralism
We need to be humble in the light of our shortcomings, and embrace any strategy that helps us exercice our capabilities. 
#+REVEAL: split
Constructionism. Seminal paper: [[http://www.papert.org/articles/EpistemologicalPluralism.html][Epistemological Pluralism and the Revaluation of the Concrete]], by Seymour Papert and Sherry Turkle
** Methodology
Desirable properties such as:
- testability
- reactivity
- incrementality
- immediacy
*** Why interactive programming?
- bottom-up programming
- domain exploration
- bricolage and prototyping
- Bret Victor
- ideal fit for innovation, learning and teaching 

** A definition

Interactive programming is the procedure of writing parts of a program while it is already active.

#+REVEAL: split

From within the environment provided by the REPL, you can define and redefine program elements such as variables, functions, classes, and methods; evaluate any Lisp expression; load files containing Lisp source code or compiled code; compile whole files or individual functions; enter the debugger; step through code; and inspect the state of individual Lisp objects.

*** How do you build a story for interactive programming?
- What properties must a programming language have to build a good story for interactive programming?

Consult a paper (from 1978): [[http://www.ida.liu.se/ext/caisor/archive/1978/001/caisor-1978-001.pdf][Programming in an Interactive Environment: the ``Lisp'' Experience]] by Erik Sandewall
#+REVEAL: split

- Bootstrapping
- Incrementality
- Procedure orientation
- Internal representation of programs
- Full checking capability
- Declaration-free kernel
- Data structures and database
- Defined I/O for data structure
- Handles and interactive control

#+REVEAL: split

The kernel of the programming system must contain the following programs:

- a parser 
- a program-printer
- an interpreter and/or
- a compiler 

** The REPL
#+BEGIN_SRC emacs-lisp
(loop (print (eval (read))))
#+END_SRC
** Functionality of a Lisp REPL
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in roll-in)
 * History of inputs and outputs.
 * Variables for last result, last error (*1, *e).
 * Help and documentation for commands. (~doc~, ~source~ in clojure.repl namespace)
 * Variables to control the reader. (~*data-readers*~, ~*default-data-reader-fn*~)
 * Variables to control the printer. (~*print-length*~, ~*print-level*~)
*** How is a Lisp REPL different from any other REPL?

- SO: [[http://stackoverflow.com/questions/5671214/is-lisp-the-only-language-with-repl][Is Lisp the only language with REPL?]]
- Clearly not: http://repl.it/
- Yet, Lisp’s story for interactive programming is unparalleled.

*** A REPL is not enough
#+BEGIN_QUOTE
But for the true Lisp programming experience, you need an environment, such as SLIME, that lets you interact with Lisp both via the REPL and while editing source files. — *Peter Seibel*, Practical Common Lisp
#+END_QUOTE
#+REVEAL: split
#+BEGIN_QUOTE
For instance, you don't want to have to cut and paste a function definition from a source file to the REPL or have to load a whole file just because you changed one function; your Lisp environment should let us evaluate or compile both individual expressions and whole files directly from your editor. — *Peter Seibel*, Practical Common Lisp
#+END_QUOTE
** The environment
*** Types of environments
| Lisp                  | Non-Lisp            |
|-----------------------+---------------------|
| SLIME  (CL)           | COLT (Actionscript) |
| Cider (Clojure        | SuperCollider (C++) |
| Emacs (Lisp)          | Squeak (Smalltalk)  |
| Geiser (Scheme)       |                     |
| Genera (Lisp Machine) |                     |
* Clojure
Henceforth, the environment will be known as Cider.
*** Restarting the runtime
You don’t want to do that. 
#+REVEAL: split
Clojure needs to bootstrap itself inside the JVM each and every time.
*** Restarting the application
Ah. Let’s see.
*** Reloading the namespace
Cojure built-in facilities: ~(require ... :reload)~ and ~(require ... :reload-all)~ 
#+REVEAL: split
Some problems.
#+ATTR_REVEAL: :frag (roll-in)
- If you modify two namespaces which depend on each other, you must remember to reload them in the correct order to avoid compilation errors.
- If you remove definitions from a source file and then reload it, those definitions are still available in memory. If other code depends on those definitions, it will continue to work but will break the next time you restart the JVM.
- If the reloaded namespace contains defmulti, you must also reload all of the associated defmethod expressions.
- If the reloaded namespace contains defprotocol, you must also reload any records or types implementing that protocol and replace any existing instances of those records/types with new instances.
- If the reloaded namespace contains macros, you must also reload any namespaces which use those macros.
- If the running program contains functions which close over values in the reloaded namespace, those closed-over values are not updated. (This is common in web applications which construct the "handler stack" as a composition of functions.)
*** tools.namespace 
Solved by tools.namespace single API call ~refresh~.
#+REVEAL: split
The ~refresh~ function will scan all the directories on the classpath for Clojure source files, read their ns declarations, build a graph of their dependencies, and load them in dependency order. (You can change the directories it scans with set-refresh-dirs.)
#+REVEAL: split
But first, it will unload (remove) the namespaces that changed to clear out any old definitions.
#+REVEAL: split
#+BEGIN_SRC clojure
user=> (require '[clojure.tools.namespace.repl :refer [refresh]])
user=> (refresh)
user=> (def my-app (start-my-app))
#+END_SRC
#+REVEAL: split
#+BEGIN_SRC clojure
user=> (stop-my-app my-app)
user=> (refresh)
user=> (def my-app (start-my-app))
#+END_SRC
** So, is that it?
#+ATTR_REVEAL: :frag (roll-in)
- No global state. ~refresh~ will destroy Vars when it reloads the namespace (even ~defonce~)
- Acquiring and releasing resources (sockets, files, database connections)
*** The Reloaded pattern
~tools.namespace~ + Lifecycle protocol (Stuart Sierra)
http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded
*** component
~component~ is a tiny Clojure framework for managing the lifecycle of software components which have runtime state. 
*** system
A set of readymade components. The usual suspects.
| Jetty         | Datomic    |
| HTTP kit      | H2         |
| Aleph         | Monger     |
| Sente         | nREPL      |
| Neo4j         | Langohr    |
| ElasticSearch | PostgreSQL |
| Immutant      | Etsy       |
*** Leiningen
JVM instances proliferation. Examples: the REPL, the ~cljs~ build, the hot-reloading process (figwheel), preprocessors, watchers....

In shell a:
#+BEGIN_SRC bash
$ lein repl :headless
#+END_SRC
In shell b:
#+BEGIN_SRC bash
$ lein trampoline cljsbuild repl-listen
#+END_SRC
Or:
#+BEGIN_SRC bash
$ lein figwheel
#+END_SRC
*** Boot
Single JVM instance.
#+BEGIN_SRC clojure
(deftask dev
  "Run a restartable system in the Repl"
  []
  (comp
   (watch :verbose true)  
   (reload) ; figwheel
   (cljs :source-map true) ; cljsbuild
   (repl :server true))) ; REPL 
#+END_SRC
*** Anatomy of a system 
#+BEGIN_SRC clojure
(defsystem dev-system
  [:db (new-h2-database DEFAULT-MEM-SPEC)
   :web (new-web-server (Integer. (env :http-port)) app)])
#+END_SRC 
*** Boot-system
#+BEGIN_SRC clojure
(deftask dev
  "Run a restartable system in the Repl"
  []
  (comp
   (environ :env {:http-port "3025"
                  :imdb-key "xxxxx-xxxx-xxxxx-xxxxx"})
   (watch :verbose true)
   (system :sys #'dev-system :auto-start true :hot-reload true :files ["handler.clj"])
   (reload) ; equivalent to figwheel
   (cljs :source-map true) ; equivalent to cljsbuild
   (repl :server true)))
#+END_SRC
#+REVEAL: split
https://github.com/danielsz/system#boot-system
** CQFD
Your application updates itself automatically when editing your source code.
- ~(require ... :reload)~
- ~(refresh}~ (via ~(reloaded.repl/reset)~)
#+BEGIN_NOTES
- (Levels of REPLs.)
- (Restarts (restores known program states) and error handling) In case of an error one gets just another REPL, with added debug commands, in the context of the error. 
#+END_NOTES
* Reference
** A history of interactive programming

http://ecx.images-amazon.com/images/I/51qjJtCFxiL.jpg

** GUIs and interactive environments
http://upload.wikimedia.org/wikipedia/en/d/d2/Symbolics-document-examiner.png
#+REVEAL: split
Garnet - a graphical toolkit for Lisp
#+REVEAL_HTML: <iframe width="420" height="315" src="https://www.youtube.com/embed/wc8A0woo0X4" frameborder="0" allowfullscreen></iframe>
** Live coding
Live coding performance in Impromptu by Andrew Sorensen.

#+REVEAL_HTML: <iframe width="420" height="315" src="https://www.youtube.com/embed/b-8Cmd6k4_M" frameborder="0" allowfullscreen></iframe>
** A REPL Everywhere
Full Clojure programming environment in Microsoft Excel
https://github.com/whamtet/Excel-REPL
** The ultimate interactive session
#+REVEAL_HTML: <iframe width="420" height="315" src="https://www.youtube.com/embed/_B_4vhsmRRI" frameborder="0" allowfullscreen></iframe>
